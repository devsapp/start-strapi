edition: 1.0.0
name: start-strapi
access: "default"

vars:
  region: "cn-hangzhou"
  caPort: 1337
  sqliteNasFile: /mnt/auto/data.db
  service:
    name: "strapi"
    description: 'Serverless Devs Web Framework Service'
    nasConfig: auto

services:
  strapi-development:
    component: fc
    actions:
      pre-deploy:
        - run: |
            npm config set sharp_binary_host "https://npmmirror.com/mirrors/sharp"
            npm config set sharp_libvips_binary_host "https://npmmirror.com/mirrors/sharp-libvips"
            SHARP_IGNORE_GLOBAL_LIBVIPS=1 npm install --arch=x64 --platform=linux --libc=glibc
          path: ./code
    props:
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: strapi-development
        description: 'strapi 开发环境'
        codeUri: './code'
        runtime: custom
        timeout: 60
        caPort: ${vars.caPort}
        cpu: 1
        diskSize: 512
        memorySize: 2048
        layers:
          - acs:fc:${vars.region}:official:layers/Nodejs16/versions/2
        environmentVariables:
          NODE_ENV: development
          PATH: /opt:/opt/nodejs16/bin:/usr/local/bin/apache-maven/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ruby/bin
          API_TOKEN_SALT: ${env.API_TOKEN_SALT}
          DATABASE_FILENAME: ${vars.sqliteNasFile}
          APP_KEYS: ${env.APP_KEYS}
          PORT: ${vars.caPort}
          ADMIN_JWT_SECRET: ${env.ADMIN_JWT_SECRET}
          HOST: 0.0.0.0
          DATABASE_CLIENT: sqlite
          TRANSFER_TOKEN_SALT: ${env.TRANSFER_TOKEN_SALT}
          NODE_PATH: /opt/nodejs/node_modules
        customRuntimeConfig:
          command:
            - node
            - server.js
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: '/*'
              methods:
                - GET
                - POST
                - PUT
                - DELETE

  strapi-production:
    component: fc
    props:
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: strapi-production
        description: 'strapi 生产环境'
        codeUri: './code'
        runtime: custom
        timeout: 60
        caPort: ${vars.caPort}
        cpu: 1
        diskSize: 512
        memorySize: 2048
        layers:
          - acs:fc:${vars.region}:official:layers/Nodejs16/versions/2
        environmentVariables:
          NODE_ENV: production
          PATH: /opt:/opt/nodejs16/bin:/usr/local/bin/apache-maven/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ruby/bin
          API_TOKEN_SALT: ${env.API_TOKEN_SALT}
          DATABASE_FILENAME: ${vars.sqliteNasFile}
          APP_KEYS: ${env.APP_KEYS}
          PORT: ${vars.caPort}
          ADMIN_JWT_SECRET: ${env.ADMIN_JWT_SECRET}
          HOST: 0.0.0.0
          DATABASE_CLIENT: sqlite
          TRANSFER_TOKEN_SALT: ${env.TRANSFER_TOKEN_SALT}
          NODE_PATH: /opt/nodejs/node_modules
        customRuntimeConfig:
          command:
            - node
            - server.js
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: '/*'
              methods:
                - GET
                - POST
                - PUT
                - DELETE

  helper:
    component: fc 
    actions:
      post-deploy: 
        - run: s helper invoke
          path: ./
    props:
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: _FC_keep-warm
        description: 'Serverless Devs Web Framework Helper Function'
        codeUri: './helper'
        runtime: python3
        timeout: 60
        memorySize: 128
        instanceConcurrency: 1
        environmentVariables:
          WP_URL: ${framework.output.url.custom_domain[0].domain}
      triggers:
        - name: timerTrigger     
          type: timer   
          config:    
            payload: '{}'    
            cronExpression: '@every 5m'
            enable: true